package org.golemi.crypto.rsa.algo;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 * Test la classe {@link MullerRabinPrimarityVerificator}
 * @author golemi
 *
 */
public final class MullerRabinPrimarityTest {

	public static void main(String[] args) {
		if(args == null || args.length < 2){
			//testTp();
			System.out.println("Vous devez renseigner borne min et borne max en arguments ");
		}
		int  t1 =  Integer.parseInt(args[0]);
		int  t2 =  Integer.parseInt(args[1]);
		System.out.println("Generation aleatoirs d'un nombre premier entre 2^"+t1 + "et  2^ "+t2);
		BigInteger value = MullerRabinPrimarityVerificator.generatePremier(t1, t2);
		System.out.println(value + " est   premier  ");
	}

	public static void testTp(){
		List<String> values = new ArrayList<String>(10);
		String value01 = "2";
		values.add(value01);
		
		String value02 = "4";
		values.add(value02);
		
		String value03 = "47";
		values.add(value03);
		
		String value04 = "48";
		values.add(value04);
		
		String value1 = "1372474333";
		values.add(value1);
		
		String value2 = "698667953569770018071401527445719925098526886787596019395345296076418718817922952501298486626724419637048587145360182974636551661838796525107685952212285152903";
		values.add(value2);
		
		String value3 ="2412834291517178817972993205486801485314207162779369189434773059867534032244597592154315758323626975574626432692903250063803499998044465398897768504441970140421";
		values.add(value3);
		
		String value4_1024_bit = "4410967631534250206576729469017686793449403997127317217554451860350488821929984617778044767335097879223477254027731143733955014920374959175768516876895516669795693078757402129336346857720736759376212181633382999531406780003256750697360297313676078431899076595497399523759944342127736373886410750949624944787013249616363433957564621";
		values.add(value4_1024_bit);
		
		String value5_1024_bit = "5831845368701907869059546429641905929760954882380221442437502740607717217533153675880268394356483281432845058993561136301832540183443453439083690164478724017481120052540775069164281546840514268486007656325232209012071274311060372243794213430074163720399826729279148670501396785397248935645140770369908255410492378759805209808194429";
		values.add(value5_1024_bit);
		
		String value6_1024_bit = "58318453687019078690595464296419059297609548823802214424375027406077172175331536758802683943564832814328450589935611363018325401834434534390836901644787240174811200525407750691642815468405142684860076563252322090120712743110603722437942134300741637203998267292791486705013967853972489356451407703699082554104923787598052098081944292";
		values.add(value6_1024_bit);
		
		for (String p : values) {
			boolean result = MullerRabinPrimarityVerificator.isProbablePrime(new BigInteger(p));
			System.out.println(p + " est -il  premier ? :  " + result);
		}
	}
}